<%= h2 "Mechanics" %>

This chapter discusses the fundamental building blocks and concepts of operations: steps, signals, the ctx object and how to run operations.

<%= h3 "Invocation" %>

Operations represent functions in your application, both in a domain-oriented way and from a programmatical point of view. That is why there's only one way to run an operation.

<%= h4 "Call" %>

The `#call` class method is how you run your operation along with its steps.

<%= code "instance-method-call" %>

And that's literally the only way to invoke your steps. It is not allowed to run a subset of steps, only. If you need that, you might have to introduce a new operation, or [change the wiring](#operation-wiring-api) to achieve the same effect.

<%= h4 "Implicit call" %>

In Ruby, it's possible to skip the word `call`. That's why you might often see invocations of operations that might look a bit cryptic in the beginning.

<%= code "instance-method-implicit-call" %>

Anyhow, the implicit call style underlines the functional aspect of an operation. Since, per convention, the operation name is a verb (e.g. `Create`) there's no need to think of another verb to actually _run_ that "verb". That's why we love the implicit call style!

<%= h4 "Input variables" %>

Any variables you pass into the invocation will be readable by all steps of the operation (unless configured otherwise).

<%= code "ctx-read-call" %>

Here, the `:params` variable can be accessed in each step via the `ctx` object, which is the first positional argument passed to each step.

<%= code "ctx-read", collapse: :meths %>

While this is a breathtaking feature of Trailblazer, it's a bit clumsy and we got a more convenient way to read from `ctx`.

<%= h4 "Keyword arguments" %>

Instead of manually checking `ctx` for the presence of a particular variable, you can add a keyword argument to your step's signature.

<%= code "ctx-read-kwargs" %>

The `:params` variable is now a local variable `params` in your step method.

Another benefit: if the caller of your operation fails to provide `:params`, Ruby will complain automatically of a missing keyword!

<%= code "kwargs-error" %>

Ruby's epic [keyword arguments](https://thoughtbot.com/blog/ruby-2-keyword-arguments) even allow defaulting of variables, should they be absent in `ctx`.

Note that you can use any number of keyword arguments in your signature.

<%= h4 "Writing state" %>

It is also possible to _write_ to `ctx`, should you fancy to publish information out of the step.

<%= code "ctx-write" %>

The following steps will be able to read the `:model` variable exactly the same way it worked with `:params`.

<%= code "ctx-write-read", collapse: :body %>

Once an operation run finished, variables added to the `ctx` are readable by the caller on the outside via the [result object](#operation-mechanics-result).

Keep in mind that the above is the default behavior. You may configure what comes in and goes out of a step using [variable mapping](#operation-variable-mapping).

<%= h3 "Flow control" %>

When being invoked with `#call`, the operation works off its steps in the order they were defined with `#step`. This is called the "happy path", or the success track.

<%= image_tag "memo-create.png" %>


Once a step returns a "failure", the operation will deviate to the "failure track" and skip the remaining steps on the success track. Instead, the remaining steps added using `#left` (formerly `#fail`) will be executed.

Steps can communicate their outcome to the operation's flow control with their return value.

<%= h4 "Success" %>

The `#validate` step in our example does a simple check to see if `params[:memo]` is present.

<%= code "return-success" %>

Since this is the only line in the method, the return value will be either true, signalizing a successful validation, or false, indicating there's a formal problem with the incoming user data.

The return value doesn't have to `true` or `false`, but can be any "truthy" or "falsey" (e.g. `nil`) value.

<%= h4 "Failure" %>

A falsey return value will deviate the operation's path to the failure track.

<%= code "return-failure" %>

This depressive step will always return a falsey value (`nil` is evaluated to `false`), the remaining success path steps will always be skipped. Don't do this!

<%= h4 "Signal" %>

The binary `true`/`false` outcome is useful for many scenarios. However, sometimes a step might have a third outcome - for example, to indicate a network error that needs to be handled off the failure track.

<%= code "return-signal" %>

In this step, we're returning a "third" possible value. The trick is: the `NetworkError` needs to be a subclass of `Signal`.

<%= code "signal-operation", collapse: :meths %>

That way, the operation's routing will recognize this third outcome. Speaking of, the third scenario needs to be properly connected using the [Wiring API](#operation-wiring-api).

<%= code "signal-steps" %>

Using tools the Wiring API provides, this adds new connections plus an entire new terminus of our operation!

<%= h3 "Terminus" %>

Here, `#notify` encountering a disastrous network error will make the operation stop the execution in a third terminus called `network_error`.

<%= image_tag "memo-network-error.png" %>

<%= h4 "Semantic" %>

In general, a terminus is a way to communicate an outcome state of a particular operation to the user. This can be as simple as manually running an operation and checking which terminus it stopped in.

<%= code "terminus" %>

You can ask the terminus for its _semantic_ by calling `#to_h`. The semantic can be any meaningful term you want, for instance, we named the success path terminus `:success`.

<%= h4 "Nesting" %>

Those termini start making even more sense when nesting operations.

<%= code "terminus-subprocess" %>

It is possible (and required!) to wire termini of a nested operation into the container circuit - this is much cleaner than handling different outcomes by hand, and allows for tracing and debugging.

Check out the [Wiring API](#operation-wiring-api) to learn how to leverage multiple outcomes in operations.

<%= h3 "Result" %>

As the `ctx` is being passed from step to step, it accumulates data. In order to access this data on the outside, the `ctx` is converted to a result object after the run is finished.

You can read variables using the `#[]` reader.

<%= code "result-read" %>

In addition to the ctx variables, the result object also exposes the outcome of the entire operation run.

<%= code "result-success" %>

For your convenience, the result object also exposes `#failure?` as a counter-part.


<%= h3 "Inheritance" %>

Operations are classes that provide a DSL to model the logic circuit.

<%= code "inherit-create", collapse: :meths %>

You can use Ruby's inheritance to derive subclasses from operations.

<%= h4 "Subclass" %>

Inheritance allows you to share logic and behavior across any number of subclasses.

<%= code "inherit-update-empty", collapse: :meths %>

Subclassing will not only copy over methods, but the entire circuit of `Create` along with its three steps.

<%= h4 "Customize" %>

You can now insert, replace or even delete new steps in the `Update` class.

<%= code "inherit-update", collapse: :meths %>

This will replace the `create_model` step with new `find_model` logic. Obviously, you have to provide the `#find_model` method in the `Update` class.

When inserting steps into subclasses you can use any [step DSL options](#operation-step-dsl-sequence-options). You might even drill into deeply nested, inherited class compounds [using `#patch`](#FIXME).
