
<%= h2 "Overview" %>

An activity is the central building block in a Trailblazer architecture. It's an abstraction that helps structuring your business code while taking over the control flow for you.

<%= info do %>
You're confused about `Operation` and `Activity`? It's simple: an operation is a very thin high-level API around the activity, providing you a less clumsy `Operation.call()` and the result object.

Both come with the exact same DSL.
<% end %>

Most of the times, activities are defined via our "step DSL".

<%= code_tabs "memo-create", collapse: "meths" %>

It's a convenient way for you to define _what_ happens. The activity takes care of the _when_ - which reduces your application code while providing a great amount of beautiful features, such as tracing.

Internally, the above activity compiles to some kind of "circuit" which looks as follows.

<%= image_tag "memo-create.png" %>

As visible, your "steps" are placed onto two tracks, forming a "railway".

<%= h3 "Railway" %>

This is a great concept [stolen from functional programming](https://fsharpforfunandprofit.com/rop/)! The railway is your mental model of the code flow. If a step fails, the execution will deviate to the "failure track", skipping the remaining "success" steps, and eventually stopping on the "failure terminus". The terminus is how you communicate the outcome of your activity run to the outer world.

Now, that's why when running your activity, the outcome will always be either "success" or "failure".

<%= code_tabs "memo-call" %>

This is how you invoke an activity. Note how the input data goes into the activity's `#call` method. It returns the terminus and the `ctx` object that was passed from step to step within the activity.

<%= h3 "Step" %>

With activities, your application code is structured into steps. These steps can be any callable Ruby object, but very often, developers use instance methods. Check out their signature and the return value!

<%= code_tabs "memo-create", collapse: :body %>

The hash given into the activity invocation is passed from step to step as `ctx`. Contained variables, such as `:params` can be accessed using Ruby's lovely [keyword arguments](https://thoughtbot.com/blog/ruby-2-keyword-arguments) feature.

Steps can instruct the activity about the step outcome by returning a truthy or falsey value from the step method.

<%= h4 "State" %>

Since we're dealing with business logic in steps, you're allowed to write state to the `ctx` object. The subsequential steps can access the new variables just as any other variable on `ctx`.

<%= code "save" %>

After running the activity, `ctx` variables can also be retrieved, for example for rendering in a controller view, or in your unit tests.

<%= code_tabs "memo-call-model" %>

And that's it, you just learnt the basic mechanics of activities.

<%= h3 "Features" %>

Activities not only help structuring, they are an entirely new development experience.

* You can define any wiring and any circuit you need in order to accomplish your task.
* Activities also help modelling complex , long-running workflows.
* We have nesting to put activities into activities.
* Tracing will save you hours of debugging.
* You can control what variables come in and out of steps.


