<%= h3 "Path()", embed: gem_version(:dsl, "1.2.0", introduced: true) %>

For branching out a separate path in an operation, use the `Path()` macro. It's a convenient, simple way to declare alternative routes, even if you could do everything it does [manually](#activity-wiring-api-track-custom-track).

<%= h4 "Terminus" %>

You can use the `:terminus` option for `Path()` to lead the path to an existing or new terminus.

<%= code "path-helper", collapse: "meths" %>

If the `#find_provider` steps returns false, the steps on the "paypal" path will be executed. Since we are using the `:terminus` option, the run stops in the new terminus `:paypal` .

<%= image_tag "wiring-path-helper.png" %>

You don't necessarily have to use the `:failure` output in order to branch out a new path. You might as well use an [additional signal](##activity-mechanics-flow-control-signal), or any other predefined output of the task.

When using `Path()`, the steps on the path will only have one `:success` output. Note that there's no connection going to the failure track from `#charge_paypal`.

<%= h4 "Failure" %>

<%= info do %>
We're working on a `:failure` option for `Path()` to allow steps with a failure output.
<% end %>

<%= h4 "Connect_to" %>

If you want the path to reconnect and join the railway at some point, use the `:connect_to` option.

<%= code "path-helper-connect-to", collapse: "meths" %>

Instead of creating an additional terminus, the last path step will be connected to whatever step is specified via the `Id()` helper.

<%= image_tag "wiring-path-connect-to.png" %>

You can easily branch out and handle specific edge cases using this helper.

<!-- OLD link https://trailblazer.to/2.1/docs/activity.html#activity-wiring-api-path-end_task-end_id-deprecation -->
<%= h4 "End_task/End_id Deprecation" %>

In older versions before `trailblazer-activity-dsl-linear-1.2.0`, connecting the `Path()` to a separate terminus required you to pass two  options `:end_task` and `:end_id`.

<%= code :ruby do %>
Output(...) => Path(end_task: Activity::End.new(semantic: :valid), end_id: "End.valid") do
  # ...
end
<% end %>

This is now simplified (and more consistent) by introducing the `:terminus` option.

<%= code :ruby do %>
Output(...) => Path(terminus: :valid) do
  # ...
end
<% end %>

If you haven't updated your code you will see a deprecation warning.

<%= code :ruby do %>
[Trailblazer] <file.rb> Using `:end_task` and `:end_id` in Path() is deprecated, use `:terminus` instead.
  Please refer to https://trailblazer.to/2.1/docs/activity.html#activity-wiring-api-path-end_task-end_id-deprecation
<% end %>
