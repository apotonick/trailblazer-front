<%= h3 "Sequence Options" %>

In addition to wiring options, there are a handful of other options known as _sequence options_. They configure where a task goes when inserted, and helps with introspection and tracing.

<%= h4 "id" %>

The DSL will provide default names for tasks.
You can name explicitely using the `:id` option.

<%= code "id", collapse: "meths" %>

The IDs are as follows.

<%= code "id-inspect" %>

Assigning explicit IDs to steps is advisable when you're planning use patching or inheritance. Keep in mind that this ID will be part of your internal (but public) API.

Naming also shows up in tracing and introspection.

If no `:id` is provided, defaults names are given to steps - these might be awkward sometimes.


<%= h4 "Delete" %>

When it's necessary to remove a task, you can use `:delete`.

<%= code "delete" %>

The `:delete` option can be helpful when using modules or inheritance to build concrete operations from base operations. In this example, a very poor one, the `validate` task gets removed, assuming the `Admin` won't need a validation.

<%= code "delete-inspect" %>

All steps are inherited, then the deletion is applied, as the introspection shows.

<%= h4 "Before" %>

To insert a new task before an existing one, for example in a subclass, use `:before`.

<%= code "before", collapse: "meths" %>

The activity now contains a new `policy` step just before the inherited tasks.

<%= code "before-inspect" %>

<%= h4 "After" %>

To insert after an existing task, you might have guessed it, use the `:after` option with the exact same semantics as `:before`.

<%= code "after", collapse: "meths" %>

The task is inserted after, as the introspection shows.

<%= code "after-inspect" %>

<%= h4 "Replace" %>

Replacing an existing task is done using `:replace`.

<%= code "replace", collapse: "meths" %>

Replacing, obviously, only replaces in the applied class, not in the superclass.

<%= code "replace-inspect" %>

<%= h4 "Inherit" %>


