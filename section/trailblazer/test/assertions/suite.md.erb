<%= h3 "Suite" %>

In addition to the above assertion helpers, the "Suite" test mode helps you with configuring defaults, so there's even less code.

The "Suite" test is designed to

* simplify the merging of the input arguments
* merge expected attributes automatically without having to repeat those
* set defaults like the tested operation


A typical operation test case might look as follows.

<%= code "test", zoom: "zoom" %>

<%= h4 "Installation" %>

If you want to use the Suite logic to save typing, instruct our `Test.module` using the `:suite` option (you could've guessed that!).

<%= code "install" %>

This will initialize merging logic along with `default_ctx`, `expected_attributes`, `operation` and `key_in_params`. However, you still need to configure those defaults yourself.

<%= h4 "default_ctx" %>

You can define a `default_ctx` using `let()` (and maintain different versions in `describe` blocks). `default_ctx` defines what to pass *into* the operation per default.

<%= code "default-ctx" %>

Note that `default_ctx` is always the full, complete context you'd normally pass into `Operation.call()`.

You have two ways to customize this `ctx` in your actual test cases:

* Pass a hash to the assertion helpers, which will be merged with the model-specific values.
* `Ctx()` for more extensive changes, or to entirely overwrite the default structure.

The `default_ctx` is used as the `input` argument for `#assert_pass` and `#assert_fail`.

<%= h4 "Expected attributes" %>

The counterpart of `default_ctx` defines what the attributes of the operation's `model` will look like when the operation was run successfully.

<%= code "expected-attrs" %>

This hash is used only with `#assert_pass` and represents the third positional argument.

<%= h4 "operation" %>

Instead of having to pass the asserted operation constant each time you use an assertion helper, you can conveniently define it using `let()`.

<%= code "let-operation" %>

Again, you may use any level of `describe` to fine-tune your tests. You may also override it using the [`:operation` option].

<%= h4 "key_in_params" %>

As typical for a Rails app, the actual incoming form fields are nested under a specific key, such as `params[:memo][...]`. The `key_in_params` sets this key to `:memo`. This is necessary for the automatic merging logic in Suite.

Note that, if your app doesn't nest attributes under a "root" key, you can set `key_in_params` to `false`.

<%= code "key_in_params" %>

This will instruct the merging logic to omit that model-named key. In turn, the `default_ctx` shall have one nesting level less.

<%= code "let-key-in-params-false" %>

<%= h4 "assert_pass" %>

The assertion helpers from `Suite` are bringing together `operation`, `default_ctx` and `expected_attributes`. As a matter of fact, `#assert_pass` in "Suite style" doesn't need any arguments at all.

<%= code "assert-pass-empty" %>

This resolves to an effective call like so.

<%= code :ruby do %>assert_pass operation, default_ctx, expected_attributes
<% end %>

As you can see, the Suite helper uses your defaults wherever possible. Now, the real power becomes visible when testing specific cases.

<%= code "assert-pass" %>

The first hash passed here represents a chunk of the `params` you want to test. It is merged into `default_ctx[:params][:memo]` for you.

The second hash is merged with `expected_attributes`. In addition to all default assumptions, it checks whether the model's `tag_list` property is an array of two elements.

<%= info do %>
All tactical features such as the [block style](#trailblazer-test-operation-unit-tests-assert_pass-block-style) or [returning the result object](#trailblazer-test-operation-unit-tests-assert_pass-return-value) are identical to the basic `#assert_pass` helper.
<% end %>

Suite's `#assert_pass` is aiming at very typical use cases when writing tests with a huge cover rate. Nevertheless, it saves you from having to repeat `params` hashes or expected attributes over and over again.

<%= h4 "assert_fail" %>

The assertion helper for testing validation errors also uses the `default_ctx`.

<%= code "assert-fail" %>

This makes testing a specific edge case very straight-forward. Here, we test if passing an invalid `tag_list` in `params[:memo]` will yield the expected contract validation error.

Note that only `tag_list` is invalid! The required field `title` is still set via the `default_ctx`.

<%= h3 "Ctx Helper" %>

If the rather simple auto-merging of the `ctx` in `Suite` is not enough, and you're in need of a custom-tailored `ctx` to pass into the tested operation, use `Ctx()`. It mostly goes as the first argument to `#assert_pass` and `#assert_fail`.

<%= code "ctx-merge" %>

The `Ctx()` helper will, per default, grab the `default_ctx` and deep-merge it with the hash you're providing. The merge results in the following data-structure to be passed into an operation.

<%= code "ctx-merge-actual" %>


The helper brings some nice API especially for testing edge cases and failures.

<%= code "ctx-example" %>

Whenever you use `Ctx()` the computed hash is passed through directly into the operation, so you have full control over what's going in. Both `assert_pass` and `assert_fail` are not altering your ctx anymore.

<%= h4 "Merge" %>

The standard behavior of `Ctx()` is to merge the passed hash with `default_ctx`.

<%= code "ctx-inject", collapse: "skip" %>

This allows to quickly add variables such as the `:current_user` to the ctx.

<%= h4 "Params Merge" %>

Anything under the `:params` key is deep-merged with your `default_ctx`, which is helpful for customizing form field values.

<%= code "ctx-merge", collapse: "skip" %>

Note how `:title` is added to the existing `:memo` hash, effectively overwriting the default `:title`.

<%= h4 "Exclude" %>

If you want to delete a certain form field from the input, you can use `:exclude`. This is great for testing presence or required validations.

<%= code "ctx-exclude", collapse: "skip" %>

The `:title` field under `:song` is now removed from the input.

You may also use `:exclude` in combination with the params merging.

<%= code "ctx-exclude-params-merge", collapse: "skip" %>

Or exclude form fields and still add variables.

<%= code "ctx-exclude-merge", collapse: "skip" %>

