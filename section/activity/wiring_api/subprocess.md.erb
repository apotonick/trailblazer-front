<%= h3 "Subprocess" %>

While you could manually nest an operation into another, the `Subprocess()` macro helps to embed an operation as a step of a container operation.

Consider the following operation implementing a more complex validation. By extracting that logic to a separate operation, you're making this code better testable, and reusable across your application.

<%= code "nested", collapse: :meths %>

Use `Subprocess()` to nest it into the `Create` operation.

<%= code "container", collapse: :meths %>

The macro automatically wires all of `Validate`'s termini to the known counter-part tracks.

<%= image_tag "subprocess.png" %>

The `Subprocess` macro will go through all outputs of the nested operation, fetch their semantics and search for tracks with the same semantic - it's that simple.

Note how the nested operation really acts as if it's a plain step - in fact, the execution code doesn't even know this is a "real" separate operation.

<%= h4 "Output" %>

You can use the familiar Wiring DSL to reconnect termini of the nested operation.

<%= code "container-output", collapse: :meths %>

For demonstration purposes, the nested's `failure` output now goes straight to `#notify`.

<%= image_tag "subprocess-output.png" %>

This is identical to connecting a "normal" step's output and allows to treat particular outcomes of a nested operation in a non-standard way - for example, routing a "failed" terminus to a success path.

<%= h4 "Terminus" %>

A nested operation doesn't have to have two termini, only.

<%= code "nested-terminus", collapse: :meths %>

The `Validate` operation could expose a third terminus `:invalid` to indicate that `params` wasn't formatted properly.

`Subprocess()` will try to match the nested termini semantics to the tracks it knows. You may wire a custom terminus like `:invalid` using `Output()`.

<%= code "container-terminus", collapse: :meths %>

The new special terminus is now wired to the `failure` track of the containing `Create` operation.

<%= image_tag "subprocess-terminus.png" %>

You may connect the custom terminus using any of the Wiring's API helpers.

<%= warning do %>
There will be an `IllegalSignalException` exception thrown at runtime time when not connecting a custom terminus. Use the [:strict option](#operation-wiring-api-subprocess-strict) to avoid runtime problems.
<% end %>

<%= h4 "Strict" %>

The `:strict` option is still experimental: https://github.com/trailblazer/trailblazer-activity-dsl-linear/issues/59

<%= h4 "Fast-track" %>

When nesting another operation (or `Activity::FastTrack`), its fast-track temini won't be connected automatically. Just like with a "normal" step, you need to instruct the Wiring API.

<%= code "subprocess-fast-track", collapse: "meths" %>

By providing `fast_track: true`, the nested termini will be connected to the matching outer tracks.

<%= image_tag "wiring-subprocess-fast-track.png" %>

Omitting this option is usually the source for an `IllegalSignalError` at run-time.
