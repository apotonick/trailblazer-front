<%= h2 "Activity" %>

An `Activity` instance exposes two public methods.

* `Activity#call` to invoke the activity.
* `Activity#to_h` that returns the `Schema` hash which contains all data that was collected
  during compile time.

This instance is usually created via a DSL, the `Schema` (and Activity) is created when compiled in `intermediate.rb`.

An `Activity` is created by a DSL or other layers, but it's completely unrelated to any DSL.
It is the runtime object that actually invokes your steps.


<%= h3 "Schema" %>

The schema hash can be accessed using `Activity#to_h`. It consists of four mandatory keys.

1. `activity.to_h[:circuit]` The executable `Activity::Circuit that will actually run the task graph.
2. `activity.to_h[:nodes]` A `Schema::Nodes` instance with an `Attributes` instance per activity task. Usually used with `Introspect::Nodes()`.
2. `activity.to_h[:outputs]` The output instances this activity exposes.
2. `activity.to_h[:config]` A hash keeping viable data such as `:wrap_static`. Note that you can add to this structure during compilation.

<%= h4 "Nodes" %>

<%= h4 "Attributes" %>


<%= h3 "Invocation process" %>

<%= h4 "Call method" %>

Every step (technically, it's a *task*) will be run by invoking its `#call` method. This was a design decision to simplify building activities without having to wrap each step into some adapter that then dispatches the invocation to the actual step.

<%= h4 "Circuit" %>

The circuit, when invoked via `#call` (DISCUSS: maybe that's not necessary) runs one step after another and figures out the next step.

It uses a `Runner` to actually invoke each step.

<%= h4 "Runner" %>

The idea of the `Runner` is to provide different ways of invoking a step (which could also be any operation). Currently, we provide a simple `#call`ing implementation, and one that runs each step using a taskWrap.
