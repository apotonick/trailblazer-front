<%= h2 "Operation unit tests" %>

<%= gem_version "trailblazer-test", "1.0.0" %>


Whenever you introduce a new operation class to your application, you have four choices for testing.

1. You could skip testing and program the next feature - then, you shouldn't be reading this.
2. If the operation is simple enough, cover its behavior in a smoke test and test both the successful invocation and its invalid state in a UI test. Nevertheless, this can be cumbersome and slow.
3. Write your own operation unit tests.
4. Use `assert_pass` and `assert_fail` to quickly test all possible inputs and outcomes in a unit test.

The goal of `trailblazer-test` is to provide an API for writing extremely robust tests for operations (or activities) with a minimal amount of written test code. Asserting edge cases - such as specific validations or possible breaking scenarios - should be a one-liner with this library.

TODO: how to include, etc.
<%= h3 "Base class" %>

It is a good idea to maintain a slim `OperationTest` or `OperationSpec` base class in your `test_helper.rb`.

<%#= code "operation-spec" %>

By including the assertion modules your tests can use our assertions such as `assert_pass` and `assert_exposes`.





<%= h3 "Assert_pass" %>

The very basic version of `#assert_pass` runs an operation and asserts the reached terminus was `:success`.

<%= code "pass-pass" %>

You need to pass the operation constant and the entire input hash yourself.

<%= h4 "Return value" %>

The assertion helper returns the operation's result object (or `ctx` when testing an `Activity`) allowing you to write your own assertions per test case.

<%= code "pass-return", collapse: "skip" %>


<%= h4 "Block style" %>

To implement assertions in addition to the default ones, you can also use the block style.

<%= code "pass-block", collapse: "skip" %>

You can combine your own assertions with the [model assertions](#trailblazer-test-operation-unit-tests-assert_pass-model-assertions) provided by `#assert_pass`.

<%= h4 "Model assertions" %>

In many cases, you may want to assert attributes on the model the operation produced. After the input hash, `#assert_pass` takes keyword arguments of attributes that must match the model's.

<%= code "pass-model", collapse: "skip" %>

Internally, the key/value pairs will be transformed to assertions like so.

<%= code "pass-model-manual" %>

Note that you can use the lambda form for dynamic assertions.

<%= h4 "model_at" %>

When the asserted model isn't named `result[:model]`, use the `:model_at` option.

<%= code "pass-model-at", collapse: "skip" %>

Here, the internal logic will check attributes against `result[:record]`.

<%= h4 "WTF?" %>

Whenever you're unsure what's happening in your operation, or a test fails that shouldn't, add a question mark and use `assert_pass?`.

<%= image_tag "assert-pass-wtf" %>

The operation will be called with [wtf?](/2.1/docs/trailblazer/index.html#trailblazer-developer-wtf-) and the trace is printed on the terminal.

<%= h3 "Assert_fail" %>


