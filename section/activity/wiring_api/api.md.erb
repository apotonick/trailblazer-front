<%= h2 "Wiring API" %>

You can use the wiring API to model more complicated circuits in operations.

<%= info do %>
Since the wiring API is part of the Step DSL, it's implemented in the [`trailblazer-activity-dsl-linear` gem](https://github.com/trailblazer/trailblazer-activity-dsl-linear). Feel invited to extend our DSL!
<% end %>

<%= h3 "Railway" %>

Without additional configuration, when using `#step` the following happens.

1. The new step is put either on the success or failure track, depending on whether you used `#step` or [`#left`](#activity-step-dsl-railway-left) for insertion (internally, this happens via the `:magnetic_to` option).
2. The respective predecessor step is connected to the new step.
3. As, in a railway, a step typically has two logical outcomes, the step's `success` output is connected to the following step on the success track. Usually, this would be the `success` terminus.
4. The exact same thing happens for the step's `failure` output.

<%= image_tag "memo-create.png" %>

Looking closer at a step, the orange circle on a step's edge represents the `failure` output. The outgoing line without any circle is the `success` output.

<%= info do %>
Technically, this diagram is incorrect since steps sitting on the `failure` track have two outputs as well. However, as both outputs are linked to the next failure step, this is usually depicted as a single line.
<% end %>

Now, let's see how we can customize this operation using the Wiring API.

<%= h3 "Output()" %>

Rewiring a particular step always starts with `Output()`. This DSL helper allows you to specify which _outgoing_ connection you're planning to reconnect.

<%= h4 "Implicit output" %>

In a railway-based activity, such as `Trailblazer::Operation`, each step exposes two outputs per default: `:success` and `:failure`. This is why you can simply reference that well-known output by its semantic. The one-argument form of `Output()` we call "implicit output".

<%= code "output-track", collapse: "meths" %>

With this customization, you're building a bullet-proof `#save` step, that even in case of failure goes back to the success track. Hopefully, your `#save` logic is failsafe.

<%= image_tag "wiring-output.png" %>

This, by the way, is how `#pass` is implemented.

<%= h4 "Explicit output" %>

If needed, a step can have more than two outcomes. For instance, `#save` could detect and report a database error in addition to its binary outcomes of success and failure.

<%= code "output-explicit", collapse: "meths" %>

To add an output, you call `Output()` with two arguments: the signal to indicate, and the semantic of that new output. Note that the signal has to be derived from `Trailblazer::Activity::Signal`.

<%= image_tag "wiring-explicit-output.png" %>

In this example, the new output `:database_error` is routed straight to the failure track. When the operation teminates, you might not be able to see why it failed: it might be better to introduce a separate terminus.

<%#= h3 "Terminus" %>
<%= h3 "End()" %>

A terminus represents an outcome of an operation run. It's not only helpful when running an operation manually, but also when nesting operations.

You can use the `End()` helper to connect an output directly to either an existing terminus (most of the times, that'd be `:success` or `:failure`), or you can wire it to a new terminus.

<%= code "output-end", collapse: "meths" %>

Two things happen here: first, the new terminus `:db_error` is added to the operation as it represents an unknown, new terminus. Then, the `failure` output of `#save` gets connected to it.

<%= image_tag "wiring-end.png" %>

You may use `End()` multiple times in one operation. This will connect the steps to the same terminus.

<%#= h3 "Terminus", embed: gem_version(:dsl, "1.0.0") %>
<%= h3 "Terminus" %>

Instead of `End()` you may add additional termini to an operation using `#terminus`.

<%= code "terminus", collapse: "meths" %>

The `CRUD` class here acts as an abstract template for concrete operations.

<%= image_tag "wiring-terminus.png" %>

In a subclass, you could then connect steps to this new terminus using `End()`.

<%= code "terminus-sub", collapse: "meths" %>

Note that there are more inheritance mechanics for building template operations, such as the [`:inherit` option](#activity-mechanics-inheritance).

<%= h3 "Track()" %>

Use `Track()` when you want a step's output to connect to the next
step that is "magnetic to" the desired track.

<%= h4 "Helper" %>

For instance, a step (or terminus) sitting on the success track will be attracting the predecessor step to connect to it.

<%= code "output-track", collapse: "meths" %>

`Track()` expects the track name, or the "polarization", as we call it sometimes.

<%= image_tag "wiring-output.png" %>

Here, the wiring algorith will connect the `:failure` output of the `#save` step to the next available step on the `:success` track, which is `#notify`.

<%= h4 "Custom Track" %>

You can build entire new tracks using a combination of `Track()` and `:magnetic_to`.

<%= code "custom-track", collapse: "meths" %>

When adding a terminus via `#terminus`, its "polarization" will be the same name as its semantic, `:paypal` in this example (this is achieved using the `:magnetic_to` option behind the scenes).

Next, we add `#find_provider` and reference `Track(:paypal)` for one of its outputs. This will be connected to the next possible step "magnetic to" `:paypal`.

To manually place a step onto that new track, you need to use `:magnetic_to` and `Output()` as it's done with `#charge_paypal`.

This will compile the following operation circuit.

<%= image_tag "wiring-custom-track" %>
