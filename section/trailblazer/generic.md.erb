<%= h2 "About" %>

Trailblazer is a collection of gems to help you structure growing Ruby applications by providing a higher level of architecture through new abstractions.

<%= h3 "Abstractions" %>

The layers we provide are designed to be stand-alone and do not require you buying the full TRB stack.

* **Form objects** to move validation and processing logic out of models into dedicated and renderable objects. [→ REFORM docs](/2.1/docs/reform/)
* **Service objects** that embrace your business code, orchestrate different domain layers, and allow for a solid, testable architecture. [→ OPERATION docs](/2.1/docs/operation/)
* **View components** for better encapsulation in your HTML views. [→ CELLS docs](/2.1/docs/cells/)
* **Representers** to parse incoming JSON or XML documents, and to serialize outgoing data. [→ REPRESENTABLE docs](/2.1/docs/representable/)
* Trailblazer does *not* come with SQL abstractions or routing as those layers are provided by exisiting frameworks such as Rails or Hanami.

<%= info do %>
Are you new to TRB? Then it's probably best to start with [our LEARN section](#trailblazer-learn) and find out more about this framework!
<% end %>

Currently, the framework consists of around 40 gems. The main gem `trailblazer` is an umbrella gem with the sole reason to pull all default dependencies for you. Feel free to pick and choose what you need for your applications.

<%= h3 "Our mission" %>

Trailblazer empowers developers to build better applications. By "better" we mean maintainable, stable and, yes, fun to work with!

Our approach enforces encapsulation by providing new abstraction layers. It maximes testability and reusability, and simplifies onboarding of new developers as we have strong conventions, thorough docs and screencasts, and a [vivid community](https://trailblazer.zulipchat.com).

Unlike other "modern architecture" approaches in the Ruby community (as seen in numerous blog posts and books) we do not tell you how to *apply* a new, fancy pattern in your project by giving you suggestions how to change your code or how to introduce that new, self-tailored service object or view model. No. we give you battle-tested objects, abstractions and functions that enforce a clean architecture.

We firmly believe that the utilization of ready-to-use layers will always prevail over a documentation-driven approach. In the latter, reliance on constantly outdated "architecture docs" creates a continuous struggle for a designated senior to document the process of creating a specific type of object.

<%= h3 "Gems" %>

The following list of gems is an overview of the most important core components in Trailblazer.

<table class="table table-striped-gems">
  <thead>
    <tr>
      <th colspan="2">Gem</th>
      <th colspan="3">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr class="trailblazer-group">
      <td colspan="2"></td>
      <td colspan="3" class="text-center"><strong>CORE</strong></td>
      <td colspan="2"></td>
      <td></td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/trailblazer.html#trailblazer-rails">trailblazer-rails</a></nobr>
      </td>
      <td colspan="3">
        Glue code for conveniently using TRB in a Rails project. Adds <code>Controller#run</code> for invoking operations and <code>Controller#cell</code> to render cells.
      </td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/activity.html">trailblazer-activity</a></nobr>
      </td>
      <td colspan="3">
        Callable run-time circuits that control the execution flow of your tasks.
      </td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/activity.html#activity-overview-dsl">trailblazer-activity-dsl-linear</a></nobr>
      </td>
      <td colspan="3">
        DSL that provides <code>Path</code>, <code>Railway</code> and <code>FastTrack</code> activities.
      </td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/trailblazer.html#trailblazer-context">trailblazer-context</a></nobr>
      </td>
      <td colspan="3">
        Context implementation.
      </td>

    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/trailblazer.html#trailblazer-option">trailblazer-option</a></nobr>
      </td>
      <td colspan="3">
        Callables implementation.
      </td>

    </tr>

    <tr class="trailblazer-group">
      <td colspan="2"></td>
      <td colspan="3" class="text-center"><strong>HELPER</strong></td>
      <td colspan="2"></td>
      <td></td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/endpoint.html">trailblazer-endpoint</a></nobr>
      </td>
      <td colspan="3">
        Implement the entire controller flow, from authentication until rendering, via activities.
      </td>

    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/operation.html">trailblazer-operation</a></nobr>
      </td>
      <td colspan="3">
        Thin API around <code>FastTrack</code> exposing the "old" <code>call</code>-API named <code>Operation</code>.
      </td>

    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/operation.html#operation-macros">trailblazer-macro</a></nobr>
      </td>
      <td colspan="3">
        Provides <code>Nested()</code>, <code>Model()</code> and other macros for everyday usage.
      </td>

    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/operation.html#operation-contract-validate">trailblazer-macro-contract</a></nobr>
      </td>
      <td colspan="3">
        Provides the <code>Contract::Validate()</code> macro and friends.
      </td>

    </tr>

    <tr class="trailblazer-group">
      <td colspan="2"></td>
      <td colspan="3" class="text-center"><strong>TOOLS</strong></td>
      <td colspan="2"></td>
      <td></td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/trailblazer.html#trailblazer-developer">trailblazer-developer</a></nobr>
      </td>
      <td colspan="3">
        Activity visualization, tracing, debugging, PRO Editor communication.
      </td>

    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/trailblazer.html#trailblazer-test">trailblazer-test</a></nobr>
      </td>
      <td colspan="3">
        Minitest assertions and tools for fast TRB testing.
      </td>

    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="#">trailblazer-rspec</a></nobr>
      </td>
      <td colspan="3">
        Rspec testing extensions.
      </td>

    </tr>

    <tr class="trailblazer-group">
      <td colspan="2"></td>
      <td colspan="3" class="text-center"><strong>PRO</strong></td>
      <td colspan="2"></td>
      <td></td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="#">trailblazer-workflow</a></nobr>
      </td>
      <td colspan="3">
        Long-running activities with process engine, events and collaboration.
      </td>

    </tr>
  </tbody>
</table>

Along with the core gems goes a rich list of eco-system gems.

<table class="table table-striped-gems">
  <thead>
    <tr>
      <th colspan="2">Gem</th>
      <th colspan="3">Summary</th>
      <th colspan="2">Dependencies</th>
      <th>Source</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/reform.html">reform</a></nobr>
      </td>
      <td colspan="3">
        Form objects.
      </td>
      <td colspan="2">
      </td>
      <td>
        <nobr><a href="https://github.com/trailblazer/reform" target="_blank"><i class="fab fa-github"></i></a></nobr>
      </td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/cells.html">cells</a></nobr>
      </td>
      <td colspan="3">
        Generic view components.
      </td>
      <td colspan="2">
      </td>
      <td>
        <nobr><a href="https://github.com/trailblazer/cells" target="_blank"><i class="fab fa-github"></i></a></nobr>
      </td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/representable.html">representable</a></nobr>
      </td>
      <td colspan="3">
        Maps representation documents from and to Ruby objects.
      </td>
      <td colspan="2">
      </td>
      <td>
        <nobr><a href="https://github.com/trailblazer/representable" target="_blank"><i class="fab fa-github"></i></a></nobr>
      </td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/disposable.html">disposable</a></nobr>
      </td>
      <td colspan="3">
        Decorators on top of your ORM layer.
      </td>
      <td colspan="2">
      </td>
      <td>
        <nobr><a href="https://github.com/apotonick/disposable" target="_blank"><i class="fab fa-github"></i></a></nobr>
      </td>
    </tr>

    <tr>
      <td colspan="2">
        <nobr><a href="/2.1/docs/roar.html">roar</a></nobr>
      </td>
      <td colspan="3">
        Parse and render REST API documents using representers.
      </td>
      <td colspan="2">
      </td>
      <td>
        <nobr><a href="https://github.com/trailblazer/roar" target="_blank"><i class="fab fa-github"></i></a></nobr>
      </td>
    </tr>
  </tbody>
</table>
