<section class="bg-bg-blue pt-20 pb-32 px-10">
  <h2 class="section-header text-white font-bold text-4xl lg:text-6xl">
    Our 
    <span class="text-purple-text">abstraction</span>
    layers
  </h2>
  <p class="text-white text-lg text-center mt-10 mx-auto max-w-[45rem]">
    Trailblazer's main objective: <span class="font-bold uppercase text-purple-text">keep software maintainable</span>. We do so by providing a range of additional abstraction layers, where code is moved from conservative "MVC" to new layers and objects.
  </p>
  <div class="max-w-[63rem] section-content-wrapper md:py-0">
    <div class="md:text-left md:flex-row md:gap-16 lg:gap-20 md:justify-between md:mt-[5.5rem] flex flex-col mt-10 text-center">

      <div class="max-w-50">
        <pre><code class="rounded  border-light-purple border border-light-purple border">class MemosController < ApplicationController
  def create
    if Memo::Operation::Create.(params: params)
      render
    end
  end</code></pre>

      <pre><code class="rounded  border-light-purple border mt-4">class Memo < ApplicationRecord
  belongs_to :user
  has_many :memos
end</code></pre>

      </div>

      <div class="md:max-w-[28rem] flex flex-col">
        <div class="text-white">
          <h3 class="lg:text-3xl font-bold text-3xl">
            <span class="text-purple-text">Lean</span>
            MVC
          </h3>
          <p class="mt-4 text-lg lg:mt-5">
            Move your
            <span class="text-purple-text">business logic</span>
            out of controllers and models.
            </p>
          <p class="mt-4 text-lg lg:mt-5">
            Let controllers do routing and rendering, let models be SQL abstractions instead
            of being dumps for all sorts of application code. Your messy callback chains go to operations.
          </p>
        </div>
      </div>
    </div>

    <div class="md:text-left md:flex-row md:gap-16 lg:gap-20 md:justify-between md:mt-24 flex flex-col mt-10 text-center">
      <div class="md:max-w-[28rem] flex flex-col">
        <div class="text-white">
          <h3 class="lg:text-3xl font-bold text-3xl">
            A place for
            <span class="text-purple-text">business logic</span>

          </h3>
          <p class="mt-4 text-lg lg:mt-5">
            Our service object <span class="text-purple-text">operation</span> takes over control flow, maximizes reusability with inheritance and composition, and lets your team focus on writing features.
          </p>
        </div>
      </div>
      <div class="max-w-50">
        <pre><code class="rounded  border-light-purple border">module Memo::Operation
  class Create < Trailblazer::Operation
    step :validate
    step :save
    step :send_email
    step :increase_counter
    fail :errors</code></pre>

      </div>
    </div>

    <div class="md:text-left md:flex-row md:gap-16 lg:gap-20 md:justify-between md:mt-24 flex flex-col mt-10 text-center">

      <div class="max-w-50">
        <pre><code class="rounded  border-light-purple border">module Memo::Contract
  class Create < Reform::Form
    property :text
    property :author

    validates :text, presence: true
  end</code></pre>
      </div>

      <div class="md:max-w-[28rem] flex flex-col">
        <div class="text-white">
          <h3 class="lg:text-3xl font-bold text-3xl">
            <span class="text-purple-text">Tackling</span>
            Problems
          </h3>
          <p class="mt-4 text-lg lg:mt-5">
            Our self-contained solutions include <a href="/2.1/docs/reform" class="underline text-purple-text">form objects</a>, <a href="/2.1/docs/reform" class="underline text-purple-text">representers</a> for parsing and rendering, and our popular <a href="/2.1/docs/reform" class="underline text-purple-text">view component</a> library.
          </p>
        </div>
      </div>
    </div>
  </div>
</section>
