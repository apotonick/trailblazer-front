class ViewsController < ApplicationController
  require "cells"
  require "cells/__erb__"
  require "torture/cms"


  module My
    module Cell
      def self.delegate_to_controller_helpers(target, *methods) # FIXME: move to cells gem
        helpers = Module.new do
          methods.each do |name|
            define_method name do |*args, **kws, &block|
              @options[:controller].helpers.send(name, *args, **kws, &block)
            end
          end
        end

        target.include(helpers)
      end


      # This is delibarately a PORO, and not a cell, to play with the "exec_context" concept.
      class Section # #Torture::Cms::Section
        include Torture::Cms::Helper::Header # needs {headers}
        include Torture::Cms::Helper::Code   # needs {extract}

        def initialize(controller:, **options)
          @options = options.merge(controller: controller)
        end

        def to_h
          {
            headers: @options[:headers]
          }
        end

        # 'data-toggle': toggle, 'data-tag': "##{target}"
        def code_tabs(*args, **kws) # TODO: implement tabs
          operation_file = "autogenerated/operation_#{@options[:file]}"

          colors =  %(data-show-color="bg-bg-purple-1" data-hide-color="bg-[#E4E4E4]")
          code_tag_class = @options[:code_attributes][:class] # DISCUSS: do we always get this? this should be {required :code_attributes} in the cell's exec_context.
          code_tag_class = code_tag_class.sub("rounded", "")
          code_tag_class = code_tag_class + "rounded-tr rounded-b"

          code_options = {
            code_tag_attributes: @options[:code_attributes].merge(class: code_tag_class)
          }

          return %(<div class="spacing-y-0">) +

          %(<div class="spacing-x-1 mb-[6px]">
            <a href="#" data-toggle="code-tab" data-type="code-tab-activity">
              <span class="font-semi-bold bg-bg-purple-1 p-2 rounded-t" data-show="code-tab-activity" data-hide="code-tab-operation" #{colors}>Activity</span>
            </a>
            <a href="#" data-toggle="code-tab" data-type="code-tab-operation">
              <span class="font-semi-bold bg-[#E4E4E4] p-2 rounded-t" data-show="code-tab-operation" data-hide="code-tab-activity" #{colors}>Operation</span>
            </a>
          </div>) +

          # raise args.inspect
          %(<div class="code-tab-activity code-tab-content">#{code(*args, **kws, **code_options)}</div>) +
          %(<div class="code-tab-operation code-tab-content hidden">#{code(*args, **kws, file: operation_file, **code_options)}</div>) +

          %(</div>)
        end
        def api(*) # FIXME: implement

        end

        # INFO_MARGIN_TOP = "mt-9"
        # DISCUSS: do we want those variables in initializer/tailwind?
        # INFO_CLASSES = Cms::Config.tailwind.info.fetch(:class)
        # WARNING_CLASSES = Cms::Config.tailwind.warning.fetch(:class)

            # = image_tag "info_icon.svg"
        def info(type: :info, &block)
          box(img: "info_icon.svg", bg: "bg-bg-purple-1/50", &block)
        end

        def warning(&block)
          box(img: "light_bulb_icon.svg", bg: "bg-bg-orange", &block)
        end

        def box(bg:, img:, &block) # TODO: use cell for this.
          kramdown_options  = @options.fetch(:kramdown_options)
          convert_method    = kramdown_options.fetch(:converter)

          icon_tag = @options[:controller].helpers.image_tag img
          html  = yield

          html = Kramdown::Document.new(html, kramdown_options).send(convert_method) # TODO: encapsulate that.

          %(
<div class="rounded flex p-4 gap-4 #{bg}">
  #{icon_tag}
  <div class="space-y-3">
    #{html}
  </div>
</div>)
        end

        def gem_version(name, version, **)
          # <a href="https://github.com/trailblazer/trailblazer-activity-dsl-linear" class="pink"><i class="fa fa-gem" aria-hidden="true"></i> trailblazer-activity-dsl-linear 1.2.0</a>
          svg = %(<svg class="mt-1 fill-grey" xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 512 512"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M168.5 72L256 165l87.5-93h-175zM383.9 99.1L311.5 176h129L383.9 99.1zm50 124.9H256 78.1L256 420.3 433.9 224zM71.5 176h129L128.1 99.1 71.5 176zm434.3 40.1l-232 256c-4.5 5-11 7.9-17.8 7.9s-13.2-2.9-17.8-7.9l-232-256c-7.7-8.5-8.3-21.2-1.5-30.4l112-152c4.5-6.1 11.7-9.8 19.3-9.8H376c7.6 0 14.8 3.6 19.3 9.8l112 152c6.8 9.2 6.1 21.9-1.5 30.4z"/></svg>)

          %(<span class="flex inline-block border border-grey text-grey pt-1 pb-1 pl-2 pr-1 rounded">#{svg} <a href="" class="ml-1">#{name} #{version}</a></span>)
        end

        My::Cell.delegate_to_controller_helpers(self, :image_tag)

        module ImageTag
          def image_tag(*args, **options)
            super(*args, **Cms::Config.tailwind.img, **options)
          end
        end

        include ImageTag

        module H
          module Render
            class H4 < Torture::Cms::Helper::Header::Render
              step :render_breadcrumb, replace: :render_header

              def render_breadcrumb(ctx, header:, classes:, title:, parent_header:, **)

                ctx[:html] = %(<h4 id="#{header.id}" class="#{classes}">#{parent_header.title}
                  <span class="text-purple bg-lighter-purple p-2 rounded font-medium">#{title}</span>

                  </h4>)
              end
            end
          end

          H2_CLASSES = Cms::Config.tailwind.h2.fetch(:class)
          H3_CLASSES = Cms::Config.tailwind.h3.fetch(:class)
          H4_CLASSES = Cms::Config.tailwind.h4.fetch(:class)

          def h2(*args, **options)
            super(*args, **options, classes: H2_CLASSES)
          end

          def h3(*args, **options)
            super(*args, **options, classes: H3_CLASSES)
          end

          def h4(*args, render: Render::H4, **options)
            super(*args, **options, render: render, classes: H4_CLASSES)
          end
        end

        include H
      end
    end
  end

  module Application
    module Cell
      class Container
        def initialize(controller:, **options)
          @options = options.merge(controller: controller) # TODO: find way how to specify required kws.
        end

        My::Cell.delegate_to_controller_helpers(self, :csrf_meta_tags, :csp_meta_tag, :stylesheet_link_tag, :javascript_importmap_tags)

        def script_for_page_identifier
          %(<script>pageIdentifier = "#{@options.fetch(:page_identifier)}";</script>)
        end

        def to_h
          {}
        end
      end

      class Layout
        # TODO: abstract into cells-5.
        module Render
          def initialize(controller:, **options)
            @options = options.merge(controller: controller)
          end

          My::Cell.delegate_to_controller_helpers(self, :link_to, :image_tag) # navbar.erb

          def render(template)
            ::Cell.({template: template, exec_context: self}) # DISCUSS: does {render} always mean we want the same exec_context?
          end

          def to_h
            {}
          end
        end

        include Render

        def navbar_link_to(text, path, is: nil)
          classes = @options[:belongs_to] == is ? "underline decoration-[5px] decoration-purple underline-offset-[15px]" : ""

          link_to text, path, class: "font-medium text-base uppercase lg:normal-case lg:font-semibold #{classes} #{navbar_link_classes}"
        end

        private def navbar_link_classes
          ""
        end

        def navbar_logo
          "logo_blue_ruby.svg"
        end

        def navbar_options
          "bg-white sticky"
        end

        def navbar_div_options
          ""
        end
      end

      # This is delibarately a PORO, and not a cell, to play with the "exec_context" concept.
      class Section # #Torture::Cms::Section
        include Torture::Cms::Helper::Header # needs {headers}

        def initialize(controller:, **options)
          @options = options.merge(controller: controller)
        end

        def to_h
          {
            headers: @options[:headers]
          }
        end
      end
    end
  end

  module Documentation
    module Cell
      class TocRight
        def initialize(controller:, h2:, **options)
          @options = options.merge(controller: controller, h2: h2)
        end

        My::Cell.delegate_to_controller_helpers(self, :link_to)

        def h2
          @options[:h2]
        end

        def css_id
          "right-toc-#{@options[:h2].id}"
        end

        def to_h
          {}
        end
      end

      class Layout
        def link_to(text, url, **options)
          %(<a href="" class="#{options[:class]}">#{text}</a>)
        end

        def initialize(left_toc_html:, right_tocs_html:, version_options:)
          @options = {left_toc_html: left_toc_html, right_tocs_html: right_tocs_html, documentation_title: version_options[:title]||raise }
        end

        def to_h
          {}
        end

        def toc_left
          @options[:left_toc_html]
        end

        def tocs_right
          @options[:right_tocs_html]
        end

        def documentation_title
          @options[:documentation_title]
        end
      end

      class TocLeft
        def initialize(headers:)
          @options = {headers: headers}
        end

        def link_to(text, url, **options)
          %(<a href="#{url}" class="#{options[:class]}">#{text}</a>)
        end

        def to_h
          {}
        end
      end
    end

    Flow = Cms::Flow.build(
      toc_left:     {template_file: "app/concepts/cell/documentation/toc_left.erb", context_class: Documentation::Cell::TocLeft,
        options_for_cell: ->(ctx, level_1_headers:, **) { {headers: level_1_headers} },
        Trailblazer::Activity::Railway.Out() => {:content => :left_toc_html}},

      page:         {template_file: "app/concepts/cell/documentation/documentation.erb", context_class: Documentation::Cell::Layout,
        options_for_cell: ->(ctx, left_toc_html:, right_tocs_html:, content:, **options) { {yield_block: content, left_toc_html: left_toc_html, right_tocs_html: right_tocs_html, version_options: options} }},

      # application:  {template_file: "app/concepts/cell/application/layout.erb", context_class: Application::Cell::Layout, options_for_cell: Cms::Flow.options_for_cell},
      application:  {template_file: "app/concepts/cell/application/layout.erb", context_class: Application::Cell::Layout, options_for_cell: ->(ctx, controller:, content:, belongs_to:, **) { {yield_block: content, controller: controller, belongs_to: belongs_to} }},
      html:         {template_file: "app/concepts/cell/application/container.erb", context_class: Application::Cell::Container, options_for_cell: Cms::Flow.options_for_cell}
    )

    class Render < Torture::Cms::Page::Render::WithToc
      step :render_right_tocs
      step Subprocess(Flow)

      def render_right_tocs(ctx, headers:, controller:, **)
        context_class = Documentation::Cell::TocRight
        template = ::Cell::Erb::Template.new("app/concepts/cell/documentation/toc_right.erb")

        right_tocs =
          headers[2].collect do |h2|
            cell_instance = context_class.new(h2: h2, controller: controller) # DISCUSS: what options to hand in here?

            result = ::Cell.({template: template, exec_context: cell_instance})

            result.to_s
          end

        ctx[:right_tocs_html] = right_tocs.join("\n")
      end
    end
  end

  module Landing
    module Cell
      class Layout < Application::Cell::Layout
        # include Application::Cell::Layout::Render
        def navbar_options
          ""
        end

        def navbar_div_options
          "max-w-[1440px]"
        end

        private def navbar_link_classes
          "text-white"
        end

        def navbar_logo
          "logo_white_ruby.svg"
        end

        My::Cell.delegate_to_controller_helpers(self, :asset_path)
      end
    end

    Flow = Cms::Flow.build(
      # page: {template_file: "app/concepts/cell/landing/landing.erb", context_class: Landing::Cell::Layout, options_for_cell: Cms::Flow.options_for_cell_without_content},
      html: {template_file: "app/concepts/cell/application/container.erb", context_class: Application::Cell::Container, options_for_cell: Cms::Flow.options_for_cell}
    )
  end

  module Pro
    class Cell
      include Application::Cell::Layout::Render
    end

    Flow = Cms::Flow.build(
      page:         {template_file: "app/concepts/cell/pro/pro.erb", context_class: Pro::Cell, options_for_cell: Cms::Flow.options_for_cell_without_content},
      application:  {template_file: "app/concepts/cell/application/layout.erb", context_class: Application::Cell::Layout, options_for_cell: Cms::Flow.options_for_cell},
      html:         {template_file: "app/concepts/cell/application/container.erb", context_class: Application::Cell::Container, options_for_cell: Cms::Flow.options_for_cell}
    )
  end

  Pages = {
    # top-level options, going to all books.
    render: Documentation::Render,
    kramdown_options: kramdown_options = {converter: "to_fuckyoukramdown"}, # use Kramdown::Torture parser from the torture-server gem.

    section_cell: My::Cell::Section,
    section_cell_options: {
      controller: self,
      pre_attributes: Cms::Config.tailwind.pre,
      code_attributes: Cms::Config.tailwind.code,
      kramdown_options: kramdown_options
    },

    page_identifier: "docs",
    belongs_to: :documentation,

    "trailblazer" => { # FIXME
      toc_title: "Trailblazer",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/trailblazer/index.html",
        target_url:  "/2.1/docs/trailblazer/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "rails_integration" => { # FIXME
      toc_title: "Rails integration",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/rails_integration/index.html",
        target_url:  "/2.1/docs/rails_integration/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "test" => { # FIXME
      toc_title: "Test",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/test/index.html",
        target_url:  "/2.1/docs/test/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "internals" => { # FIXME
      toc_title: "Internals",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/internals/index.html",
        target_url:  "/2.1/docs/internals/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "activity" => {
      toc_title: "Activity",
      "2.1" => {
        title: "Activity",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/activity/index.html",
        target_url:  "/2.1/docs/activity/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" },
        "dsl/strategy.md.erb" => { snippet_file: "strategy_test.rb" },
        "dsl/api.md.erb" => { snippet_file: "basics_test.rb" },
        "dsl/path.md.erb" => { snippet_file: "path_test.rb" },
        "dsl/subprocess.md.erb" => { snippet_file: "subprocess_test.rb" },
        "dsl/options.md.erb" => { snippet_file: "subprocess_test.rb" },
        "dsl/sequence.md.erb" => { snippet_file: "sequence_options_test.rb" },
        "dsl/patching.md.erb" => { snippet_file: "patching_test.rb" },
        "dsl/composable_variable_mapping.md.erb" => { snippet_file: "composable_variable_mapping_test.rb" },
        "dsl/variable_mapping.md.erb" => { snippet_file: "variable_mapping_test.rb" },
        "dsl/macro.md.erb" => { snippet_file: "macro_test.rb" },
        "internals.md.erb" => { snippet_file: "macro_test.rb" },
        "internals/introspect.md.erb" => { snippet_file: "introspect_test.rb" },
        "interfaces.md.erb" => { snippet_file: "activity_test.rb" },
        "task_wrap.md.erb" => { snippet_file: "task_wrap_test.rb" },
        "troubleshooting.md.erb" => {section_dir: "section/developer", snippet_dir: "../trailblazer-developer/test/docs", snippet_file: "developer_test.rb" },
        # "kitchen_sink.md.erb" => { snippet_file: "____test.rb" },
      }
    },

    "macro" => {
      toc_title: "Macro",
      "2.1" => {
        title: "Macro",
        snippet_dir: "../trailblazer-macro/test/docs",
        section_dir: "section/macro",
        target_file: "public/2.1/docs/macro/index.html",
        target_url: "/2.1/docs/macro/index.html",

        "overview.md.erb"   => {snippet_file: "model_test.rb"},
        "nested/dynamic.md.erb"   => {snippet_file: "nested_static_test.rb"},
        "nested/auto_wire.md.erb"   => {snippet_file: "nested_static_test.rb"},
        "wrap.md.erb"   => {snippet_file: "wrap_test.rb"},
        "each.md.erb"   => {snippet_file: "each_test.rb"},
        "model_find.md.erb"   => {snippet_file: "model/find_test.rb"},
        "model.md.erb"   => {snippet_file: "model_test.rb"},
        "rescue.md.erb"   => {snippet_file: "rescue_test.rb"},
        "policy.md.erb"   => {snippet_file: "policy_test.rb"},
      }
    },

    "operation" => {
      toc_title: "Operation",
      "2.1" => {
        title: "Operation",
        snippet_dir: "../trailblazer-operation/test/docs",
        section_dir: "section/operation",
        target_file: "public/2.1/docs/operation/index.html",
        target_url: "/2.1/docs/operation/index.html",
      }
    },

    "workflow" => { # FIXME
      toc_title: "Workflow",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/workflow/index.html",
        target_url:  "/2.1/docs/workflow/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "endpoint" => { # FIXME
      toc_title: "Endpoint",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/endpoint/index.html",
        target_url:  "/2.1/docs/endpoint/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "reform" => { # FIXME
      toc_title: "Reform",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/reform/index.html",
        target_url:  "/2.1/docs/reform/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "cells" => { # FIXME
      toc_title: "Cells",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/cells/index.html",
        target_url:  "/2.1/docs/cells/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "representable" => { # FIXME
      toc_title: "Representable",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/representable/index.html",
        target_url:  "/2.1/docs/representable/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "disposable" => { # FIXME
      toc_title: "Trailblazer",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/disposable/index.html",
        target_url:  "/2.1/docs/disposable/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "roar" => { # FIXME
      toc_title: "Roar",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/roar/index.html",
        target_url:  "/2.1/docs/roar/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "tutorials" => { # FIXME
      toc_title: "Tutorials",
      "2.1" => {
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/activity",
        target_file: "public/2.1/docs/tutorial/index.html",
        target_url:  "/2.1/docs/tutorial/index.html",

        "activity.md.erb" => { snippet_file: "activity_basics_test.rb" }
      }
    },

    "pro_page" => {
      page_identifier: "landing",
      toc_title: "Trailblazer PRO",
      toc_left: false,
      toc: false,
      "2.1" => {
        title: "Trailblazer PRO",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/page",
        target_file: "public/2.1/pro.html",
        target_url:  "/2.1/pro.html",
        render: Pro::Flow,

        section_cell_options: {
          controller: self,
        },
      }
    },

    "landing" => {
      toc_title: "Trailblazer",
      toc_left: false,
      toc: false, # TODO: iMPLEMENT something like that
      "2.1" => {
        page_identifier: "landing",
        title: "Trailblazer",
        snippet_dir: "../trailblazer-activity-dsl-linear/test/docs",
        section_dir: "section/landing",
        target_file: "public/2.1/index.html",
        target_url:  "/2.1/index.html",
        render: Landing::Flow,

        section_cell: Landing::Cell::Layout,
        section_cell_options: {
          controller: self,
        },


        "../../app/concepts/cell/application/navbar.erb" => {snippet_file: ""},
        "hero_section.erb" => { snippet_file: "" },
        "video_section.erb" => { snippet_file: "" },
        "snippets_section.erb" => { snippet_file: "" },
        "for_whom_section.erb" => { snippet_file: "" },
        "abstractions.erb" => { snippet_file: "" },
        "features_section.erb" => { snippet_file: "" },
        "testimonials_section.erb" => { snippet_file: "" },
        "learn_more_section.erb" => { snippet_file: "" },
        "../../app/concepts/cell/application/chat_with_us.erb" => { snippet_file: "" },
        "../../app/concepts/cell/application/footer.erb" => { snippet_file: "" },
      }
    },

  }

  def docs # TODO: remove me, this is only for development.
    pages = Torture::Cms::DSL.(Pages)

    pages, _ = Torture::Cms::Site.new.render_pages(pages,
      controller: self, # TODO: pass this to all cells.
      # page_identifier: "docs",
    )

    activity_content_html = pages[4].to_h["2.1"][:content]

    render html: activity_content_html.html_safe
  end

  def product
   pages = Torture::Cms::DSL.(Pages)

    pages, _ = Torture::Cms::Site.new.render_pages(pages,
      controller: self, # TODO: pass this to all cells.
      # page_identifier: "docs",
    )

    activity_content_html = pages[-2].to_h["2.1"][:content]

    render html: activity_content_html.html_safe
  end

  def landing
    pages = Torture::Cms::DSL.(Pages)

    # pp pages


    pages, _ = Torture::Cms::Site.new.render_pages(pages,
      controller: self, # TODO: pass this to all cells.
    )

    # raise pages.keys.inspect
    activity_content_html = pages[-1].to_h["2.1"][:content]

    render html: activity_content_html.html_safe
  end

  def about;end

  def blog;end
end
