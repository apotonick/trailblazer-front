<%= h3 "Subprocess" %>

While you could manually nest an operation into another, the `Subprocess()` macro helps to embed an operation as a step of a container operation.

Consider the following activity implementing a more complex validation. By extracting that logic to a separate operation, you're making this code better testable, and reusable across your application.

<%= code "nested", collapse: :meths %>

Use `Subprocess()` to nest it into the `Create` activity.

<%= code "container", collapse: :meths %>

The macro automatically wires all of `Validate`'s termini to the known counter-part tracks.

<%= image_tag "subprocess.png" %>

The `Subprocess` macro will go through all outputs of the nested operation, fetch their semantics and search for tracks with the same semantic - it's that simple.

Note how the nested operation really acts as if it's a plain step - in fact, the execution code doesn't even know this is a "real" separate operation.

<%= h4 "Wiring" %>

You can use the familiar DSL to reconnect ends.

<%= code "reconnect", collapse: :methods %>

The nested's `failure` output now goes to the outer `success` track.

<%= image_tag "nesting-reconnect.webp" %>

In this example, regardless of nested's outcome, it will always be interpreted as a successful invocation.

<%= h4 "End" %>

A nested activity doesn't have to have two ends, only.

<%= code "end-nested", collapse: :methods %>

`Subprocess` will try to match the nested ends' semantics to the tracks it knows. You may wire custom ends using `Output`.

<%= code "end", collapse: :methods %>

The new special end is now wired to the `failure` track of the containing activity.

<%= image_tag "nesting-end.webp" %>

There will be an exception thrown if you don't connect unknown ends.

