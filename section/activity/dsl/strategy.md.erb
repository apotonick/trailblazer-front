
<%= h3 "FastTrack" %>

Based on the `Railway` strategy, the `FastTrack` pattern allows to "short-circuit" tasks and leave the circuit at specified events.

<%= info do %>
The infamous `Trailblazer::Operation` is a thin public API around `Activity::FastTrack`.
<% end %>

<%= h4 "PassFast" %>

The `:pass_fast` option wires the `:success` output straight to the new `pass_fast` end.

<%= code "ft-passfast", collapse: "mod" %>

If `validate` returns a true value, it will skip the remaining tasks on the success track and end in `End.pass_fast`.

<%= image_tag "ft-passfast.webp" %>

Note that in the example, the `create` task not accessable anymore.

<%= h4 "FailFast" %>

The counter-part for `:pass_fast` is `:fail_fast`.

<%= code "ft-failfast", collapse: "mod" %>

A falsey return value from `#validate` will deviate the flow and go straight to `End.fail_fast`.

<%= image_tag "ft-failfast.webp" %>

Again, this specific example renders the `log_errors` task unreachable.

<%= h4 "FastTrack" %>

It's possible to wire a task to the two FastTrack ends `End.fail_fast` and `End.pass_fast` in addition to the normal Railway wiring.

<%= code "ft-fasttrack", collapse: "mod" %>

The `validate` task now has four outputs. You can instruct the two new FastTrack outputs by returning either `Trailblazer::Activity::FastTrack::FailFast` or `Trailblazer::Activity::FastTrack::PassFast` (see also [returning signals]).

Note that you don't have to use both outputs.

<%= image_tag "ft-fasttrack.webp" %>

The standard FastTrack setup allows you to communicate and model up to four states from one task.

<%= h4 "Notes" %>

FIXME

* All options (`:pass_fast`, `:fail_fast` and `:fast_track`) may be used with `step`, `pass` or `fail`. If in doubt, [render the circuit].
* `:pass_fast` and `:fail_fast` can be used in combination.
