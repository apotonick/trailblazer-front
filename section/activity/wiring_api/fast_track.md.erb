<%= h3 "Fast-track" %>

The operation is based on the [`FastTrack` layout](#activity-internals-fasttrack-layout) and provides three more options to configure a step's connections.

<%= h4 "pass_fast" %>

The `:pass_fast` option wires the `:success` output straight to the new `pass_fast` terminus.

<%= code "ft-passfast", collapse: "mod" %>

If `validate` returns a true value, it will skip the remaining tasks on the success track and terminate in `End.pass_fast`.

<%= image_tag "pass_fast.png" %>

Note that in the example, the `save` step not accessable anymore.

<%= h4 "fail_fast" %>

The counter-part for `:pass_fast` is `:fail_fast`.

<%= code "ft-failfast", collapse: "mod" %>

A falsey return value from `#validate` will deviate the flow and go straight to `End.fail_fast`.

<%= image_tag "fail_fast.png" %>

Even though `#handle_errors` is on the failure track, it won't be reached from `#validate`.

<%= h4 "fast_track" %>

It's possible to wire a task to the two FastTrack ends `End.fail_fast` and `End.pass_fast` in addition to the normal Railway wiring.

<%= code_tabs "ft-fasttrack", collapse: "mod", operation_repository: true %>

The `validate` task now has four outputs. You can instruct the two new fast-track outputs by returning either `Railway.fail_fast!` or `Railway.pass_fast!` (see also [returning signals](#activity-mechanics-flow-control-signal)).

Note that you don't have to use both outputs.

<%= image_tag "fast_track.png" %>

The standard FastTrack setup allows you to communicate and model up to four states from one task.
